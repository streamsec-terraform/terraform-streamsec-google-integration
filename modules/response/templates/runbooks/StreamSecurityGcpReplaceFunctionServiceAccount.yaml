main:
  params: [input]
  steps:
    - parseFunctionId:
        assign:
          - service_id: ${input.ServiceId}
          - parts: ${text.split(service_id, "/")}

    - validateParts:
        switch:
          - condition: ${len(parts) != 6}
            raise:
              status_code: "error"
              message: ${"Invalid FunctionId format. Expected 'projects/<project>/locations/<region>/functions/<functionName>', got " + service_id}

    - extractIds:
        assign:
          - project_id: ${parts[1]}
          - region: ${parts[3]}
          - service_name: ${parts[5]}
          - empty_sa_id: "stream-account-without-roles"
          - empty_sa_email: ${"stream-account-without-roles@" + project_id + ".iam.gserviceaccount.com"}

    # Step 1: Ensure service account exists (via HTTP IAM API)
    - getServiceAccount:
        try:
          call: http.get
          args:
            url: ${"https://iam.googleapis.com/v1/projects/" + project_id + "/serviceAccounts/" + empty_sa_email}
            auth:
              type: OAuth2
          result: saData
        except:
          as: notFound
          steps:
            - createServiceAccount:
                call: http.post
                args:
                  url: ${"https://iam.googleapis.com/v1/projects/" + project_id + "/serviceAccounts"}
                  auth:
                    type: OAuth2
                  body:
                    accountId: ${empty_sa_id}
                    serviceAccount:
                      displayName: "Stream service account without roles"
                result: newSA

    # Step 2: Patch the Cloud Run service with new SA
    - updateService:
        call: http.patch
        args:
          url: ${"https://run.googleapis.com/v2/" + service_id}
          auth:
            type: OAuth2
          query:
            updateMask: "template.serviceAccount"
          body:
            template:
              serviceAccount: ${empty_sa_email}
        result: updateOp

    # Step 4: Verify
    - verifyService:
        call: http.get
        args:
          url: ${"https://run.googleapis.com/v2/" + service_id}
          auth:
            type: OAuth2
        result: verifyData

    - checkVerification:
        switch:
          - condition: ${verifyData.body.template.serviceAccount != empty_sa_email}
            raise:
              status_code: "error"
              message: ${"Verification failed service " + service_name + " is not using expected service account " + empty_sa_email}

    - done:
        return:
          status_code: "success"
          message: ${"Service " + service_name + " successfully updated to use " + empty_sa_email}
