main:
  params: [input]
  steps:
    # Step 1: Parse vm_id string from input dict
    - parseVMId:
        assign:
          - vm_id: ${input.VmId}
          - parts: ${text.split(vm_id, "/")}

     # Step 1.0: Log the received vm_id
    - logInput:
        call: sys.log
        args:
          text: ${"Runbook started. Received parameter vm_id = '" + vm_id + "'"}
          severity: INFO

    # Step 1.1: Validate parts length
    - validateParts:
        switch:
          - condition: ${len(parts) != 6}
            raise:
              status_code: "error"
              message: ${"Invalid VmId format. Expected 'projects/<project_id>/zones/<zone>/instances/<instance_name>', got; " + vm_id}

    # Step 1.2: Extract IDs
    - extractIds:
        assign:
          - project: ${parts[1]}
          - zone: ${parts[3]}
          - instance: ${parts[5]}

    # Stop the instance
    - stopInstance:
        try:
            call: googleapis.compute.v1.instances.stop
            args:
                project: ${project}
                zone: ${zone}
                instance: ${instance}
            result: stopResult
        except:
          as: reset_error
          raise:
            status_code: "error"
            message: ${"Failed to stop VM " + reset_error.body.error.message }

    # Get operation name
    - setOpName:
        assign:
          - operationName: ${stopResult.name}

    # Wait until stop operation is DONE
    - waitForStopOperation:
        try:
          steps:
            - getOp:
                call: googleapis.compute.v1.zoneOperations.get
                args:
                  project: ${project}
                  zone: ${zone}
                  operation: ${operationName}
                result: opResult

            - checkOpStatus:
                switch:
                  - condition: ${opResult.status == "DONE" and not("error" in opResult)}
                    next: verifyInstanceStopped
                  - condition: ${opResult.status == "DONE" and "error" in opResult}
                    raise:
                      status_code: "error"
                      message: ${"Stop operation failed; " + json.encode(opResult.error)}

            - sleep:
                call: sys.sleep
                args:
                  seconds: 5

            - loop:
                next: waitForStopOperation
        except:
            as: reset_error
            raise:
                status_code: "error"
                message: ${"Failed to stop VM; " + reset_error.body.error.message}

    # Verify the instance is actually in STOPPED state
    - verifyInstanceStopped:
        call: googleapis.compute.v1.instances.get
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance}
        result: instanceResult

    - checkInstanceStopped:
        switch:
          - condition: ${instanceResult.status == "TERMINATED"}
            next: removeServiceAccount
          - condition: true
            raise:
                status_code: "error"
                message: ${"Stop operation completed, but VM status is " + instanceResult.status}

    # Remove service account
    - removeServiceAccount:
        call: googleapis.compute.v1.instances.setServiceAccount
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance}
          body:
            email: ""       # Remove the SA
            scopes: []      # Remove all scopes

    # Start instance again
    - startInstance:
        call: googleapis.compute.v1.instances.start
        args:
          project: ${project}
          zone: ${zone}
          instance: ${instance}

    # Done
    - done:
        return:
            status_code: "success"
            message: ${"Service account removed from instance " + instance}
